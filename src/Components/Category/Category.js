import React, { useEffect, useState } from 'react'
import Product from '../Product/Product';
import { useSelector } from 'react-redux';
import './Category.css';
import { useParams } from 'react-router';
import ScrollCategory from './ScrollCategory';

export default function Category({ search }) {
    const { name } = useParams();
    const products = useSelector(state => state.products);
    const filteredProduct = products.filter(product => product.cat === name);

    const searchProducts = useSelector(state => state.filteredProducts);

    const isFilteredProduct = (searchProducts[0] && searchProducts[0].length > 0) ? searchProducts[0] : filteredProduct;
    console.log(isFilteredProduct);

    const [count, setcount] = useState({
        prev: 0,
        next: 6
    });
    const [currentData, setCurrentData] = useState(isFilteredProduct.slice(count.prev, count.next));

    const [hasMore, setHasMore] = useState(true);
    useEffect(() => {
        setCurrentData(isFilteredProduct.slice(count.prev, count.next));
    }, [searchProducts])

    const getMoreData = () => {
        if (isFilteredProduct.length <= count.next) {
            setHasMore(false);
            return;
        }
        if (hasMore) {
            setCurrentData(currentData.concat(isFilteredProduct.slice(count.prev + 6, count.next + 6)));
            setcount(prevState => ({ prev: prevState.prev + 6, next: prevState.next + 6 }));
        }
    }

    const renderedProduct = currentData.map(product => {
        return <Product key={product.id} product={product} cssName='category-product' />
    });

    const category = useSelector(state => state.category)
    const scrollCategory = category.slice(0, 3).filter(cat => {
        return cat.name !== name
    });

    const renderedScroll = scrollCategory.map(cat => {
        return <ScrollCategory name={cat.name} />
    })

    return (
        <div className='main-category'>
            {(searchProducts[0] && searchProducts[0].length > 0) ?
                <>
                    <h1 className='cat-name'>Search Result..</h1>
                    <div className='container' style={{display:'flex'}}>
                        {renderedProduct}
                    </div>
                    {(isFilteredProduct.length > count.next) ? <button onClick={getMoreData}>View More</button> : null}
                </>
                :
                <>
                    <h1 className='cat-name'>{name}</h1>
                    <div className='container' style={{display:'flex'}}>
                        {renderedProduct}
                    </div>
                    {(isFilteredProduct.length > count.next) ? <button onClick={getMoreData}>View More</button> : null}
                    <hr />
                    {renderedScroll}
                </>
            }
        </div>
    )
}
