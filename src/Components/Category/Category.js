import React, { useState } from 'react'
import Product from '../Product/Product';
import { useSelector } from 'react-redux';
import './Category.css';
import { useParams } from 'react-router';
import ScrollCategory from './ScrollCategory';

export default function Category() {
    const { name } = useParams();
    console.log(name);
    const products = useSelector(state => state.products);
    const filteredProduct = products.filter(product => product.cat === name);
    console.log(filteredProduct);

    const searchProducts = useSelector(state => state.filteredProducts);

    const isFilteredProduct = searchProducts[0] || filteredProduct

    const [count, setcount] = useState({
        prev: 0,
        next: 6
    });

    const [hasMore, setHasMore] = useState(true);
    const [currentData, setCurrentData] = useState(isFilteredProduct.slice(count.prev, count.next));
    console.log(currentData);
    
    const getMoreData = () => {
        console.log('length filter', isFilteredProduct.length, 'count', count.next);
        console.log('hasmore outside:', hasMore);
        if (isFilteredProduct.length <= count.next) {
            setHasMore(false);
            return;
        }
        if (hasMore) {
            console.log('indise hasmore if');
            setCurrentData(currentData.concat(isFilteredProduct.slice(count.prev + 6, count.next + 6)));
            setcount(prevState => ({ prev: prevState.prev + 6, next: prevState.next + 6 }));
        }
    }

    const renderedProduct = currentData.map(product => {
        return <Product key={product.id} product={product} cssName='category-product' />
    });

    const category = useSelector(state => state.category)
    const scrollCategory = category.slice(0, 3).filter(cat => {
        return cat.name !== name
    });

    const renderedScroll = scrollCategory.map(cat => {
        return <ScrollCategory name={cat.name} />
    })

    return (
        <div className='main-category'>
            <h1 className='cat-name'>{name}</h1>
            <div className="container">
                {renderedProduct}
            </div>
            {(isFilteredProduct.length > count.next) ? <button onClick={getMoreData}>View More</button> : null}
            <hr />
            {/*z <div className='scrolling-wrapper'> */}
            {renderedScroll}
            {/* </div> */}
        </div>
    )
}
